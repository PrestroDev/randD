using System;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;

// Define the connection parameters
string connectionString = "AuthType=OAuth; " +
    "Username={username}; " +
    "Password={password}; " +
    "Url=https://org.crm.dynamics.com; " +
    "AppId={clientId}; " +
    "RedirectUri=app://unique-guid-here";

// Define the name of the solution for which you want to retrieve the components
string solutionName = "My Solution";

// Create the HttpClient instance
var httpClient = new HttpClient();
httpClient.BaseAddress = new Uri(connectionString);

// Add the required headers to the HttpClient
httpClient.DefaultRequestHeaders.Accept.Clear();
httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "{access_token}");

// Create the async method to retrieve the solution ID
async Task<Guid> GetSolutionIdAsync()
{
    // Create the query string to retrieve the solution ID
    string solutionQueryString = $"/api/data/v9.2/solutions?$select=solutionid&$filter=friendlyname eq '{solutionName}' and ismanaged eq false";
    var solutionResponse = await httpClient.GetAsync(solutionQueryString);
    var solutionContent = await solutionResponse.Content.ReadAsStringAsync();
    var solutionResult = JsonConvert.DeserializeObject<dynamic>(solutionContent);
    return solutionResult.value[0].solutionid;
}

// Create the async method to retrieve the solution components
async Task<dynamic> GetSolutionComponentsAsync(Guid solutionId)
{
    // Create the query string to retrieve the solution components
    string solutionComponentsQueryString = $"/api/data/v9.2/solutioncomponents?$select=objectid&$filter=solutionid eq {solutionId} and componenttype eq 21"; // 21 represents Custom Connector component type
    var solutionComponentsResponse = await httpClient.GetAsync(solutionComponentsQueryString);
    var solutionComponentsContent = await solutionComponentsResponse.Content.ReadAsStringAsync();
    return JsonConvert.DeserializeObject<dynamic>(solutionComponentsContent);
}

// Call the async methods to retrieve the solution ID and the solution components
Guid solutionId = await GetSolutionIdAsync();
dynamic solutionComponentsContent = await GetSolutionComponentsAsync(solutionId);

// Print the names of the solution components to the console
foreach (var solutionComponent in solutionComponentsContent.value)
{
    var objectId = solutionComponent.objectid;
    Console.WriteLine($"Solution component found: {objectId}");
}
