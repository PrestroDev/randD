using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Tooling.Connector;
using System;

// Define the connection parameters
string connectionString = "AuthType=OAuth; " +
    "Username={username}; " +
    "Password={password}; " +
    "Url=https://org.crm.dynamics.com; " +
    "AppId={clientId}; " +
    "RedirectUri=app://unique-guid-here";

// Create the CrmServiceClient instance
var crmServiceClient = new CrmServiceClient(connectionString);

// Define the name of the solution for which you want to retrieve custom connectors
string solutionName = "MySolution";

// Create the QueryExpression to retrieve the custom connectors from the solution
var query = new QueryExpression("solutioncomponent")
{
    ColumnSet = new ColumnSet("objectid"),
    Criteria = new FilterExpression(LogicalOperator.And)
    {
        Conditions =
        {
            new ConditionExpression("componenttype", ConditionOperator.Equal, 21), // Custom Connector
            new ConditionExpression("solutionid", ConditionOperator.Equal, new Guid(solution.Id.ToString()))
        }
    },
    LinkEntities = 
    {
        new LinkEntity("solutioncomponent", "customapi", "objectid", "customapiid", JoinOperator.Inner)
        {
            Columns = new ColumnSet("name")
        }
    }
};

// Retrieve the custom connectors from the solution using the IOrganizationService interface
var solutionComponents = crmServiceClient.RetrieveMultiple(query).Entities;

// Print the names of the custom connectors to the console
foreach (var component in solutionComponents)
{
    string name = ((EntityReference)component.GetAttributeValue<AliasedValue>("customapi.name")).Name;
    Console.WriteLine($"Custom connector found: {name}");
}

// Retrieve the custom connectors from the solution using the IOrganizationService interface
var solutionComponents = crmServiceClient.RetrieveMultiple(query).Entities;

// Print the names of the custom connectors to the console
foreach (var component in solutionComponents)
{
    var customApiName = ((AliasedValue)component.Attributes["customapi.name"]).Value as string;
    Console.WriteLine($"Custom connector found: {customApiName}");
}

